import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:try_bluetooth/providers/FormulaProvider.dart';
import 'package:try_bluetooth/providers/GenericCRUDProvider.dart';

class FormulaWidget extends StatefulWidget {
  @override
  State<FormulaWidget> createState() => _FormulaWidgetState();
}

class _FormulaWidgetState extends State<FormulaWidget> {
  @override
  void initState() {
    super.initState();

    print("536987");

    // Initialize provider
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final provider = Provider.of<FormulaProvider>(context, listen: false);
      provider.initialize(context).then((_) {
        // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å initialize ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å getFormulaTableNames
        print("‚úÖ FormulaProvider initialized");
        final formulaTableNames = provider.getFormulaTableNames();
        print("üìù Formula table names: $formulaTableNames");
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade200, // ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ
      body: Consumer<FormulaProvider>(
        builder: (context, provider, child) {
          // Loading state
          if (!provider.isInitialized) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(color: const Color(0xFF2D3E50)),
                  SizedBox(height: 16),
                  Text(
                    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Formula Database...',
                    style: TextStyle(
                      fontSize: 16,
                      color: const Color(0xFF2D3E50),
                    ),
                  ),
                ],
              ),
            );
          }

          // Error state
          if (provider.lastError != null) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.error, color: Colors.red, size: 64),
                  SizedBox(height: 16),
                  Text(
                    '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${provider.lastError}',
                    style: TextStyle(color: Colors.red),
                  ),
                  SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () => provider.retryInitialization(context),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF2D3E50),
                      foregroundColor: Colors.white,
                    ),
                    child: Text('‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
                  ),
                ],
              ),
            );
          }

          // Main content
          return Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // Debug info card
                // Card(
                //   elevation: 2,
                //   child: Container(
                //     padding: EdgeInsets.all(12),
                //     decoration: BoxDecoration(
                //       borderRadius: BorderRadius.circular(8),
                //       color: const Color(0xFF7FB8C4).withOpacity(0.3),
                //     ),
                //     child: Row(
                //       children: [
                //         Icon(
                //           Icons.info_outline,
                //           color: const Color(0xFF2D3E50),
                //           size: 20,
                //         ),
                //         SizedBox(width: 8),
                //         Text(
                //           'Debug: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Formulas = ${provider.formulas.length}',
                //           style: TextStyle(
                //             fontSize: 12,
                //             fontWeight: FontWeight.bold,
                //             color: const Color(0xFF2D3E50),
                //           ),
                //         ),
                //       ],
                //     ),
                //   ),
                // ),
                SizedBox(height: 8),

                // Print All Tables Button Card
                // Card(
                //   elevation: 2,
                //   child: InkWell(
                //     onTap: () async {
                //       final provider = Provider.of<FormulaProvider>(
                //         context,
                //         listen: false,
                //       );
                //       await provider.printAllTables();
                //     },
                //     borderRadius: BorderRadius.circular(8),
                //     child: Container(
                //       padding: EdgeInsets.all(16),
                //       decoration: BoxDecoration(
                //         borderRadius: BorderRadius.circular(8),
                //         color: const Color(0xFF2D3E50),
                //       ),
                //       child: Row(
                //         children: [
                //           Icon(
                //             Icons.print,
                //             color: Colors.white,
                //             size: 24,
                //           ),
                //           SizedBox(width: 12),
                //           Text(
                //             'Print All Tables',
                //             style: TextStyle(
                //               color: Colors.white,
                //               fontSize: 16,
                //               fontWeight: FontWeight.w600,
                //             ),
                //           ),
                //           Spacer(),
                //           Icon(
                //             Icons.arrow_forward_ios,
                //             color: Colors.white,
                //             size: 16,
                //           ),
                //         ],
                //       ),
                //     ),
                //   ),
                // ),
                SizedBox(height: 16),

                // Main action cards
                Expanded(
                  flex: 3,
                  child:
                      provider.formulas.isEmpty
                          ? _buildEmptyFormulaCards(provider)
                          : _buildFormulaCards(provider),
                ),

                SizedBox(height: 16),

                // Database info card
                // Card(
                //   elevation: 4,
                //   child: Container(
                //     padding: EdgeInsets.all(20),
                //     decoration: BoxDecoration(
                //       borderRadius: BorderRadius.circular(8),
                //       gradient: LinearGradient(
                //         colors: [
                //           const Color(0xFF7FB8C4).withOpacity(0.3),
                //           const Color(0xFF7FB8C4).withOpacity(0.5),
                //         ],
                //         begin: Alignment.topLeft,
                //         end: Alignment.bottomRight,
                //       ),
                //     ),
                //     child: Row(
                //       children: [
                //         Icon(
                //           Icons.storage,
                //           size: 32,
                //           color: const Color(0xFF2D3E50),
                //         ),
                //         SizedBox(width: 16),
                //         Expanded(
                //           child: Column(
                //             crossAxisAlignment: CrossAxisAlignment.start,
                //             mainAxisAlignment: MainAxisAlignment.center,
                //             children: [
                //               Text(
                //                 'Formula Database',
                //                 style: TextStyle(
                //                   fontSize: 18,
                //                   fontWeight: FontWeight.bold,
                //                   color: const Color(0xFF2D3E50),
                //                 ),
                //               ),
                //               Text(
                //                 '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${provider.formulas.length} formulas',
                //                 style: TextStyle(
                //                   color: const Color(0xFF2D3E50),
                //                 ),
                //               ),
                //               Text(
                //                 'Tables: ${provider.databaseTables.length} tables',
                //                 style: TextStyle(
                //                   color: const Color(0xFF2D3E50),
                //                 ),
                //               ),
                //             ],
                //           ),
                //         ),
                //         ElevatedButton(
                //           onPressed: () => _showDatabaseViewer(provider),
                //           style: ElevatedButton.styleFrom(
                //             backgroundColor: const Color(0xFF2D3E50),
                //             foregroundColor: Colors.white,
                //           ),
                //           child: Text('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel'),
                //         ),
                //       ],
                //     ),
                //   ),
                // ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildEmptyFormulaCards(FormulaProvider provider) {
    return ListView(
      children: [
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Formula Card
        Card(
          elevation: 4,
          child: InkWell(
            onTap: () => _showCreateFormulaDialog(provider),
            borderRadius: BorderRadius.circular(8),
            child: Container(
              padding: EdgeInsets.all(20),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(8),
                gradient: LinearGradient(
                  colors: [
                    const Color(0xFF5A9B9E),
                    const Color(0xFF5A9B9E).withOpacity(0.8),
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: Row(
                children: [
                  Container(
                    padding: EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(
                      Icons.add_circle,
                      size: 28,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '‡∏™‡∏£‡πâ‡∏≤‡∏á Formula ‡πÉ‡∏´‡∏°‡πà',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.white.withOpacity(0.9),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Icon(Icons.arrow_forward_ios, color: Colors.white, size: 16),
                ],
              ),
            ),
          ),
        ),
        SizedBox(height: 12),

        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Card
        Card(
          elevation: 2,
          child: InkWell(
            onTap: () => provider.refreshFormulas(),
            borderRadius: BorderRadius.circular(8),
            child: Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(8),
                color: const Color(0xFF2D3E50),
              ),
              child: Row(
                children: [
                  Icon(Icons.refresh, color: Colors.white, size: 24),
                  SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Formula',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.white.withOpacity(0.8),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Icon(Icons.arrow_forward_ios, color: Colors.white, size: 16),
                ],
              ),
            ),
          ),
        ),
        SizedBox(height: 12),

        // ‡∏î‡∏π Database Card
        Card(
          elevation: 2,
          child: InkWell(
            onTap: () => _showDatabaseViewer(provider),
            borderRadius: BorderRadius.circular(8),
            child: Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(8),
                color: const Color(0xFF7FB8C4),
              ),
              child: Row(
                children: [
                  Icon(Icons.storage, color: Colors.white, size: 24),
                  SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '‡∏î‡∏π Database',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.white.withOpacity(0.8),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Icon(Icons.arrow_forward_ios, color: Colors.white, size: 16),
                ],
              ),
            ),
          ),
        ),
        SizedBox(height: 12),

        // Empty state card
        Card(
          elevation: 1,
          child: Container(
            padding: EdgeInsets.all(24),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(8),
              color: Colors.grey.shade100,
              border: Border.all(color: Colors.grey.shade300, width: 1),
            ),
            child: Column(
              children: [
                Icon(
                  Icons.inbox_outlined,
                  size: 48,
                  color: Colors.grey.shade400,
                ),
                SizedBox(height: 12),
                Text(
                  '‡πÑ‡∏°‡πà‡∏°‡∏µ Formula',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.grey.shade600,
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Formula ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 12, color: Colors.grey.shade500),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildFormulaCards(FormulaProvider provider) {
    return ListView.builder(
      itemCount: provider.formulas.length + 1, // +1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Add
      itemBuilder: (context, index) {
        // ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° Add Formula
        if (index == 0) {
          return Padding(
            padding: EdgeInsets.only(bottom: 12),
            child: Card(
              elevation: 4,
              child: InkWell(
                onTap: () => _showCreateFormulaDialog(provider),
                borderRadius: BorderRadius.circular(8),
                child: Container(
                  padding: EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(8),
                    gradient: LinearGradient(
                      colors: [
                        const Color(0xFF5A9B9E),
                        const Color(0xFF5A9B9E).withOpacity(0.8),
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                  ),
                  child: Row(
                    children: [
                      Container(
                        padding: EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.2),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Icon(
                          Icons.add_circle,
                          size: 28,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '‡∏™‡∏£‡πâ‡∏≤‡∏á Formula ‡πÉ‡∏´‡∏°‡πà',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                            Text(
                              '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà',
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.white.withOpacity(0.9),
                              ),
                            ),
                          ],
                        ),
                      ),
                      Icon(
                        Icons.arrow_forward_ios,
                        color: Colors.white,
                        size: 16,
                      ),
                    ],
                  ),
                ),
              ),
            ),
          );
        }

        // Formula cards
        final formula = provider.formulas[index - 1];
        return Padding(
          padding: EdgeInsets.only(bottom: 12),
          child: _buildFormulaCard(
            formula: formula,
            onTap: () => _navigateToFormulaData(formula),
          ),
        );
      },
    );
  }

  Widget _buildFormulaCard({
    required Map<String, dynamic> formula,
    required VoidCallback onTap,
  }) {
    final formulaName = formula['formula_name']?.toString() ?? 'Unknown';
    final columnCount = formula['column_count'] ?? 0;
    final description = formula['description']?.toString() ?? '';

    return Card(
      elevation: 3,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(8),
        child: Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            gradient: LinearGradient(
              colors: [
                const Color(0xFF2D3E50),
                const Color(0xFF2D3E50).withOpacity(0.8),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
          child: Row(
            children: [
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(Icons.table_chart, size: 28, color: Colors.white),
              ),
              SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      formulaName,
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    SizedBox(height: 4),
                    Row(
                      children: [
                        Container(
                          padding: EdgeInsets.symmetric(
                            horizontal: 8,
                            vertical: 2,
                          ),
                          decoration: BoxDecoration(
                            color: const Color(0xFF5A9B9E).withOpacity(0.3),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            '$columnCount ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå',
                            style: TextStyle(
                              fontSize: 11,
                              color: Colors.white,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                        if (description.isNotEmpty) ...[
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              description,
                              style: TextStyle(
                                fontSize: 11,
                                color: Colors.white.withOpacity(0.7),
                                fontStyle: FontStyle.italic,
                              ),
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ],
                ),
              ),
              SizedBox(width: 8),
              Icon(Icons.arrow_forward_ios, color: Colors.white, size: 16),
            ],
          ),
        ),
      ),
    );
  }

  // ========== NAVIGATION METHODS ==========

  void _navigateToFormulaData(Map<String, dynamic> formula) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => FormulaDetailsPage(formula: formula),
      ),
    );
  }

  void _navigateToFormulaList(FormulaProvider provider, String category) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CategoryDataPage(category: category),
      ),
    );
  }

  void _showDatabaseViewer(FormulaProvider provider) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => DatabaseViewerPage()),
    );
  }

  // ========== DIALOG METHODS ==========

  Future<void> _showCreateFormulaDialog(FormulaProvider provider) async {
    final nameController = TextEditingController();
    final descriptionController = TextEditingController();
    int columnCount = 3;
    List<TextEditingController> columnControllers = [];

    // Initialize column controllers
    for (int i = 0; i < 10; i++) {
      columnControllers.add(TextEditingController());
    }

    final result = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder:
          (context) => StatefulBuilder(
            builder:
                (context, setState) => AlertDialog(
                  backgroundColor: Colors.white,
                  title: Row(
                    children: [
                      Icon(Icons.add_circle, color: const Color(0xFF5A9B9E)),
                      SizedBox(width: 8),
                      Text(
                        '‡∏™‡∏£‡πâ‡∏≤‡∏á Formula ‡πÉ‡∏´‡∏°‡πà',
                        style: TextStyle(color: const Color(0xFF2D3E50)),
                      ),
                    ],
                  ),
                  content: SingleChildScrollView(
                    child: Container(
                      width: double.maxFinite,
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Formula name
                          TextField(
                            controller: nameController,
                            decoration: InputDecoration(
                              labelText: '‡∏ä‡∏∑‡πà‡∏≠ Formula *',
                              border: OutlineInputBorder(),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                  color: const Color(0xFF5A9B9E),
                                ),
                              ),
                              prefixIcon: Icon(
                                Icons.title,
                                color: const Color(0xFF5A9B9E),
                              ),
                            ),
                          ),
                          SizedBox(height: 16),

                          // Description
                          TextField(
                            controller: descriptionController,
                            decoration: InputDecoration(
                              labelText: '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢',
                              border: OutlineInputBorder(),
                              focusedBorder: OutlineInputBorder(
                                borderSide: BorderSide(
                                  color: const Color(0xFF5A9B9E),
                                ),
                              ),
                              prefixIcon: Icon(
                                Icons.description,
                                color: const Color(0xFF5A9B9E),
                              ),
                            ),
                            maxLines: 2,
                          ),
                          SizedBox(height: 16),

                          // Column count
                          Row(
                            children: [
                              Icon(
                                Icons.view_column,
                                color: const Color(0xFF2D3E50),
                              ),
                              SizedBox(width: 8),
                              Text(
                                '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Column:',
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xFF2D3E50),
                                ),
                              ),
                              SizedBox(width: 16),
                              DropdownButton<int>(
                                value: columnCount,
                                dropdownColor: Colors.white,
                                items:
                                    List.generate(10, (index) => index + 1)
                                        .map(
                                          (count) => DropdownMenuItem(
                                            value: count,
                                            child: Text(
                                              '$count column${count > 1 ? 's' : ''}',
                                              style: TextStyle(
                                                color: const Color(0xFF2D3E50),
                                              ),
                                            ),
                                          ),
                                        )
                                        .toList(),
                                onChanged: (value) {
                                  setState(() {
                                    columnCount = value!;
                                  });
                                },
                              ),
                            ],
                          ),
                          SizedBox(height: 16),

                          // Column names
                          Text(
                            '‡∏ä‡∏∑‡πà‡∏≠ Columns:',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: const Color(0xFF2D3E50),
                            ),
                          ),
                          SizedBox(height: 8),
                          ...List.generate(
                            columnCount,
                            (index) => Padding(
                              padding: EdgeInsets.only(bottom: 8),
                              child: TextField(
                                controller: columnControllers[index],
                                decoration: InputDecoration(
                                  labelText: 'Column ${index + 1} *',
                                  border: OutlineInputBorder(),
                                  focusedBorder: OutlineInputBorder(
                                    borderSide: BorderSide(
                                      color: const Color(0xFF5A9B9E),
                                    ),
                                  ),
                                  prefixIcon: Icon(
                                    Icons.label_outline,
                                    color: const Color(0xFF5A9B9E),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context, false),
                      child: Text(
                        '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                        style: TextStyle(color: Colors.grey),
                      ),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        // Validation
                        if (nameController.text.trim().isEmpty) {
                          _showMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Formula');
                          return;
                        }

                        bool hasEmptyColumn = false;
                        for (int i = 0; i < columnCount; i++) {
                          if (columnControllers[i].text.trim().isEmpty) {
                            hasEmptyColumn = true;
                            break;
                          }
                        }

                        if (hasEmptyColumn) {
                          _showMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Column ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á');
                          return;
                        }

                        Navigator.pop(context, true);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF5A9B9E),
                        foregroundColor: Colors.white,
                      ),
                      child: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á Formula'),
                    ),
                  ],
                ),
          ),
    );

    if (result == true) {
      final columnNames =
          columnControllers
              .take(columnCount)
              .map((controller) => controller.text.trim())
              .toList();

      final success = await provider.createFormula(
        formulaName: nameController.text.trim(),
        columnCount: columnCount,
        columnNames: columnNames,
        description: descriptionController.text.trim(),
      );

      if (success) {
        _showMessage('‚úÖ Formula ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á formula ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await provider.refreshFormulas();
      } else {
        _showMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Formula ‡πÑ‡∏î‡πâ: ${provider.lastError}');
      }
    }

    // Dispose controllers
    for (final controller in columnControllers) {
      controller.dispose();
    }
    nameController.dispose();
    descriptionController.dispose();
  }

  void _showMessage(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: const Color(0xFF2D3E50),
          duration: Duration(seconds: 2),
        ),
      );
    }
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° placeholder classes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error
class CategoryDataPage extends StatelessWidget {
  final String category;
  const CategoryDataPage({Key? key, required this.category}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(category)),
      body: Center(child: Text('Category Data Page for $category')),
    );
  }
}

class FormulaDetailsPage extends StatefulWidget {
  final Map<String, dynamic> formula;

  const FormulaDetailsPage({Key? key, required this.formula}) : super(key: key);

  @override
  State<FormulaDetailsPage> createState() => _FormulaDetailsPageState();
}

class _FormulaDetailsPageState extends State<FormulaDetailsPage> {
  List<Map<String, dynamic>> _tableData = [];
  List<String> _tableColumns = [];
  bool _isLoading = true;
  String _tableName = '';

  @override
  void initState() {
    super.initState();
    _tableName =
        'formula_${widget.formula['formula_name']?.toString().toLowerCase().replaceAll(' ', '_') ?? 'unknown'}';
    _loadTableData();
  }

  Future<void> _loadTableData() async {
    final provider = Provider.of<FormulaProvider>(context, listen: false);

    try {
      setState(() => _isLoading = true);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ table ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final tableExists = await provider.tableExists(_tableName);
      if (!tableExists) {
        setState(() {
          _isLoading = false;
          _tableData = [];
          _tableColumns = [];
        });
        return;
      }

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ columns
      final data = await provider.getTableData(_tableName);
      final columns = await provider.getTableColumns(_tableName);

      setState(() {
        _tableData = data;
        _tableColumns = columns;
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      _showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    final formulaName =
        widget.formula['formula_name']?.toString() ?? 'Unknown Formula';
    final columnCount = widget.formula['column_count'] ?? 0;
    final description = widget.formula['description']?.toString() ?? '';
    final columnNames =
        widget.formula['column_names']?.toString().split('|') ?? [];

    return Scaffold(
      backgroundColor: Colors.grey.shade200,
      appBar: AppBar(
        title: Text(
          'üìä $formulaName',
          style: TextStyle(color: const Color(0xFF2D3E50)),
        ),
        backgroundColor: const Color(0xFF7FB8C4),
        iconTheme: IconThemeData(color: const Color(0xFF2D3E50)),
        actions: [
          IconButton(
            onPressed: () => _addNewRecord(),
            icon: Icon(Icons.add),
            tooltip: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          ),
          PopupMenuButton<String>(
            onSelected: (value) => _handleMenuAction(value),
            itemBuilder:
                (context) => [
                  PopupMenuItem(
                    value: 'refresh',
                    child: Row(
                      children: [
                        Icon(
                          Icons.refresh,
                          size: 16,
                          color: const Color(0xFF2D3E50),
                        ),
                        SizedBox(width: 8),
                        Text('‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä'),
                      ],
                    ),
                  ),
                  PopupMenuItem(
                    value: 'export',
                    child: Row(
                      children: [
                        Icon(
                          Icons.file_download,
                          size: 16,
                          color: const Color(0xFF5A9B9E),
                        ),
                        SizedBox(width: 8),
                        Text('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel'),
                      ],
                    ),
                  ),
                  if (_tableData.isNotEmpty)
                    PopupMenuItem(
                      value: 'deleteAll',
                      child: Row(
                        children: [
                          Icon(
                            Icons.delete_sweep,
                            size: 16,
                            color: Colors.orange,
                          ),
                          SizedBox(width: 8),
                          Text(
                            '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                            style: TextStyle(color: Colors.orange),
                          ),
                        ],
                      ),
                    ),
                  PopupMenuItem(
                    value: 'deleteFormula',
                    child: Row(
                      children: [
                        Icon(Icons.delete_forever, size: 16, color: Colors.red),
                        SizedBox(width: 8),
                        Text('‡∏•‡∏ö Formula', style: TextStyle(color: Colors.red)),
                      ],
                    ),
                  ),
                ],
          ),
        ],
      ),
      body:
          _isLoading
              ? Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(color: const Color(0xFF2D3E50)),
                    SizedBox(height: 16),
                    Text(
                      '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...',
                      style: TextStyle(color: const Color(0xFF2D3E50)),
                    ),
                  ],
                ),
              )
              : Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Formula Info Card
                    Card(
                      elevation: 4,
                      child: Container(
                        padding: EdgeInsets.all(20),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          gradient: LinearGradient(
                            colors: [
                              const Color(0xFF7FB8C4).withOpacity(0.3),
                              const Color(0xFF7FB8C4).withOpacity(0.5),
                            ],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                        ),
                        child: Row(
                          children: [
                            Container(
                              padding: EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: const Color(0xFF2D3E50),
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: Icon(
                                Icons.table_chart,
                                size: 32,
                                color: Colors.white,
                              ),
                            ),
                            SizedBox(width: 20),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    formulaName,
                                    style: TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold,
                                      color: const Color(0xFF2D3E50),
                                    ),
                                  ),
                                  SizedBox(height: 8),
                                  Row(
                                    children: [
                                      _buildInfoChip(
                                        Icons.view_column,
                                        '$columnCount ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå',
                                      ),
                                      SizedBox(width: 8),
                                      _buildInfoChip(
                                        Icons.storage,
                                        '${_tableData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                                      ),
                                    ],
                                  ),
                                  if (description.isNotEmpty) ...[
                                    SizedBox(height: 8),
                                    Text(
                                      description,
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: const Color(
                                          0xFF2D3E50,
                                        ).withOpacity(0.7),
                                        fontStyle: FontStyle.italic,
                                      ),
                                    ),
                                  ],
                                  SizedBox(height: 8),
                                  Text(
                                    'Columns: ${columnNames.join(", ")}',
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: const Color(
                                        0xFF2D3E50,
                                      ).withOpacity(0.6),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(height: 20),

                    // Data Table Section
                    Text(
                      '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Formula',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: const Color(0xFF2D3E50),
                      ),
                    ),
                    SizedBox(height: 12),

                    Expanded(
                      child:
                          _tableData.isEmpty
                              ? _buildEmptyState()
                              : _buildDataTable(),
                    ),
                  ],
                ),
              ),
    );
  }

  Widget _buildInfoChip(IconData icon, String label) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.8),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: const Color(0xFF2D3E50).withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: const Color(0xFF2D3E50)),
          SizedBox(width: 6),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w500,
              color: const Color(0xFF2D3E50),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            padding: EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.table_chart,
              size: 64,
              color: Colors.grey.shade400,
            ),
          ),
          SizedBox(height: 24),
          Text(
            '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.w600,
              color: Colors.grey.shade600,
            ),
          ),
          SizedBox(height: 8),
          Text(
            '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            style: TextStyle(fontSize: 16, color: Colors.grey.shade500),
          ),
          SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: () => _addNewRecord(),
            icon: Icon(Icons.add),
            label: Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF5A9B9E),
              foregroundColor: Colors.white,
              padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDataTable() {
    return Card(
      elevation: 2,
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          color: Colors.white,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Table header
            Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey.shade50,
                borderRadius: BorderRadius.only(
                  topLeft: Radius.circular(12),
                  topRight: Radius.circular(12),
                ),
                border: Border(bottom: BorderSide(color: Colors.grey.shade200)),
              ),
              child: Row(
                children: [
                  Icon(Icons.table_rows, color: Colors.grey.shade600),
                  SizedBox(width: 8),
                  Text(
                    '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${_tableData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: Colors.grey.shade700,
                    ),
                  ),
                ],
              ),
            ),

            // Table content
            Expanded(
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: SingleChildScrollView(
                  child: DataTable(
                    headingRowColor: MaterialStateProperty.all(
                      const Color(0xFF7FB8C4).withOpacity(0.3),
                    ),
                    headingTextStyle: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: const Color(0xFF2D3E50),
                    ),
                    columns: [
                      ..._tableColumns.map(
                        (column) => DataColumn(label: Text(column)),
                      ),
                      DataColumn(label: Text('‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£')),
                    ],
                    rows:
                        _tableData.map((row) {
                          return DataRow(
                            cells: [
                              ..._tableColumns.map(
                                (column) => DataCell(
                                  Container(
                                    padding: EdgeInsets.symmetric(vertical: 8),
                                    child: Text(
                                      row[column]?.toString() ?? '',
                                      style: TextStyle(fontSize: 14),
                                    ),
                                  ),
                                ),
                              ),
                              DataCell(
                                Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    IconButton(
                                      icon: Icon(
                                        Icons.edit,
                                        size: 18,
                                        color: const Color(0xFF5A9B9E),
                                      ),
                                      onPressed: () => _editRecord(row),
                                      tooltip: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
                                    ),
                                    IconButton(
                                      icon: Icon(
                                        Icons.delete,
                                        size: 18,
                                        color: Colors.red,
                                      ),
                                      onPressed:
                                          () => _confirmDeleteRecord(row),
                                      tooltip: '‡∏•‡∏ö',
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          );
                        }).toList(),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // CRUD Operations
  void _addNewRecord() async {
    final columnNames =
        widget.formula['column_names']?.toString().split('|') ?? [];
    final controllers = <String, TextEditingController>{};

    for (final column in columnNames) {
      controllers[column] = TextEditingController();
    }

    final result = await showDialog<bool>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Row(
              children: [
                Icon(Icons.add_circle, color: const Color(0xFF5A9B9E)),
                SizedBox(width: 8),
                Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà'),
              ],
            ),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children:
                    controllers.entries
                        .map(
                          (entry) => Padding(
                            padding: EdgeInsets.only(bottom: 16),
                            child: TextField(
                              controller: entry.value,
                              decoration: InputDecoration(
                                labelText: entry.key,
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: BorderSide(
                                    color: const Color(0xFF5A9B9E),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        )
                        .toList(),
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.pop(context, true),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF5A9B9E),
                ),
                child: Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
              ),
            ],
          ),
    );

    if (result == true) {
      await _saveNewRecord(controllers);
    }

    controllers.values.forEach((controller) => controller.dispose());
  }

  Future<void> _saveNewRecord(
    Map<String, TextEditingController> controllers,
  ) async {
    final provider = Provider.of<FormulaProvider>(context, listen: false);

    try {
      final recordData = <String, dynamic>{};

      controllers.forEach((column, controller) {
        final columnKey = column.toLowerCase().replaceAll(' ', '_');
        recordData[columnKey] = controller.text.trim();
      });

      final success = await provider.createRecord(
        tableName: _tableName,
        data: recordData,
      );

      if (success) {
        _showMessage('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        await _loadTableData();
      } else {
        _showMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      _showMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    }
  }

  void _editRecord(Map<String, dynamic> record) async {
    final columnNames =
        widget.formula['column_names']?.toString().split('|') ?? [];
    final controllers = <String, TextEditingController>{};

    for (final column in columnNames) {
      final columnKey = column.toLowerCase().replaceAll(' ', '_');
      controllers[column] = TextEditingController(
        text: record[columnKey]?.toString() ?? '',
      );
    }

    final result = await showDialog<bool>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Row(
              children: [
                Icon(Icons.edit, color: const Color(0xFF5A9B9E)),
                SizedBox(width: 8),
                Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
              ],
            ),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children:
                    controllers.entries
                        .map(
                          (entry) => Padding(
                            padding: EdgeInsets.only(bottom: 16),
                            child: TextField(
                              controller: entry.value,
                              decoration: InputDecoration(
                                labelText: entry.key,
                                border: OutlineInputBorder(),
                                focusedBorder: OutlineInputBorder(
                                  borderSide: BorderSide(
                                    color: const Color(0xFF5A9B9E),
                                  ),
                                ),
                              ),
                            ),
                          ),
                        )
                        .toList(),
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.pop(context, true),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF5A9B9E),
                ),
                child: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'),
              ),
            ],
          ),
    );

    if (result == true) {
      await _saveEditRecord(record, controllers);
    }

    controllers.values.forEach((controller) => controller.dispose());
  }

  Future<void> _saveEditRecord(
    Map<String, dynamic> record,
    Map<String, TextEditingController> controllers,
  ) async {
    final provider = Provider.of<FormulaProvider>(context, listen: false);
    final recordId = record['id'];

    try {
      final recordData = <String, dynamic>{};

      controllers.forEach((column, controller) {
        final columnKey = column.toLowerCase().replaceAll(' ', '_');
        recordData[columnKey] = controller.text.trim();
      });

      final success = await provider.updateRecord(
        tableName: _tableName,
        recordId: recordId,
        data: recordData,
      );

      if (success) {
        _showMessage('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        await _loadTableData();
      } else {
        _showMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      _showMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    }
  }

  Future<void> _confirmDeleteRecord(Map<String, dynamic> record) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Row(
              children: [
                Icon(Icons.warning, color: Colors.orange),
                SizedBox(width: 8),
                Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö'),
              ],
            ),
            content: Text('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.pop(context, true),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                child: Text('‡∏•‡∏ö'),
              ),
            ],
          ),
    );

    if (confirmed == true) {
      await _deleteRecord(record);
    }
  }

  Future<void> _deleteRecord(Map<String, dynamic> record) async {
    final provider = Provider.of<FormulaProvider>(context, listen: false);
    final recordId = record['id'];

    try {
      final success = await provider.deleteRecord(
        tableName: _tableName,
        recordId: recordId,
      );

      if (success) {
        _showMessage('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        await _loadTableData();
      } else {
        _showMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      _showMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    }
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'refresh':
        _loadTableData();
        break;
      case 'export':
        _showMessage('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠)');
        break;
      case 'deleteAll':
        _confirmDeleteAllRecords();
        break;
      case 'deleteFormula':
        _confirmDeleteFormula();
        break;
    }
  }

  Future<void> _confirmDeleteAllRecords() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Row(
              children: [
                Icon(Icons.warning, color: Colors.orange),
                SizedBox(width: 8),
                Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'),
              ],
            ),
            content: Text(
              '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${_tableData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£?\n\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.pop(context, true),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                child: Text('‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'),
              ),
            ],
          ),
    );

    if (confirmed == true) {
      final provider = Provider.of<FormulaProvider>(context, listen: false);
      try {
        final success = await provider.deleteAllRecords(_tableName);
        if (success) {
          _showMessage('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
          await _loadTableData();
        } else {
          _showMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ');
        }
      } catch (e) {
        _showMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
      }
    }
  }

  Future<void> _confirmDeleteFormula() async {
    final formulaName = widget.formula['formula_name']?.toString() ?? 'Unknown';

    final confirmed = await showDialog<bool>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Row(
              children: [
                Icon(Icons.dangerous, color: Colors.red),
                SizedBox(width: 8),
                Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Formula'),
              ],
            ),
            content: Text(
              '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö Formula "$formulaName" ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?\n\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á Formula ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.pop(context, true),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                child: Text('‡∏•‡∏ö Formula'),
              ),
            ],
          ),
    );

    if (confirmed == true) {
      final provider = Provider.of<FormulaProvider>(context, listen: false);
      try {
        final success = await provider.deleteFormula(
          widget.formula['id'] ?? 0,
          formulaName,
        );
        if (success) {
          _showMessage('‚úÖ ‡∏•‡∏ö Formula ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
          Navigator.pop(context); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        } else {
          _showMessage('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Formula ‡πÑ‡∏î‡πâ');
        }
      } catch (e) {
        _showMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
      }
    }
  }

  void _showMessage(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: const Color(0xFF2D3E50),
          duration: Duration(seconds: 2),
        ),
      );
    }
  }
}

class DatabaseViewerPage extends StatefulWidget {
  @override
  State<DatabaseViewerPage> createState() => _DatabaseViewerPageState();
}

class _DatabaseViewerPageState extends State<DatabaseViewerPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade200,
      appBar: AppBar(
        title: Text(
          'üóÉÔ∏è Database Viewer',
          style: TextStyle(color: const Color(0xFF2D3E50)),
        ),
        backgroundColor: const Color(0xFF7FB8C4),
        iconTheme: IconThemeData(color: const Color(0xFF2D3E50)),
        actions: [
          IconButton(
            onPressed: () => _refreshTables(),
            icon: Icon(Icons.refresh),
            tooltip: '‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          ),
        ],
      ),
      body: Consumer<FormulaProvider>(
        builder: (context, provider, child) {
          if (!provider.isInitialized) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(color: const Color(0xFF2D3E50)),
                  SizedBox(height: 16),
                  Text(
                    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Database...',
                    style: TextStyle(color: const Color(0xFF2D3E50)),
                  ),
                ],
              ),
            );
          }

          if (provider.databaseTables.isEmpty) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(
                    padding: EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade100,
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      Icons.storage,
                      size: 64,
                      color: Colors.grey.shade400,
                    ),
                  ),
                  SizedBox(height: 24),
                  Text(
                    '‡πÑ‡∏°‡πà‡∏°‡∏µ Tables ‡πÉ‡∏ô Database',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.w600,
                      color: Colors.grey.shade600,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '‡∏™‡∏£‡πâ‡∏≤‡∏á Formula ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                    style: TextStyle(fontSize: 16, color: Colors.grey.shade500),
                  ),
                  SizedBox(height: 24),
                  ElevatedButton.icon(
                    onPressed: () => Navigator.pop(context),
                    icon: Icon(Icons.add),
                    label: Text('‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á Formula'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF5A9B9E),
                      foregroundColor: Colors.white,
                    ),
                  ),
                ],
              ),
            );
          }

          return Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Summary Card
                Card(
                  elevation: 4,
                  child: Container(
                    padding: EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(12),
                      gradient: LinearGradient(
                        colors: [
                          const Color(0xFF7FB8C4).withOpacity(0.3),
                          const Color(0xFF7FB8C4).withOpacity(0.5),
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                    ),
                    child: Row(
                      children: [
                        Container(
                          padding: EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: const Color(0xFF2D3E50),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Icon(
                            Icons.storage,
                            size: 32,
                            color: Colors.white,
                          ),
                        ),
                        SizedBox(width: 20),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                'Database Overview',
                                style: TextStyle(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  color: const Color(0xFF2D3E50),
                                ),
                              ),
                              SizedBox(height: 8),
                              Row(
                                children: [
                                  _buildInfoChip(
                                    Icons.table_chart,
                                    '${provider.databaseTables.length} Tables',
                                  ),
                                  SizedBox(width: 8),
                                  _buildInfoChip(
                                    Icons.functions,
                                    '${provider.formulas.length} Formulas',
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                SizedBox(height: 20),

                // Tables List Header
                Text(
                  'Tables ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: const Color(0xFF2D3E50),
                  ),
                ),
                SizedBox(height: 12),

                // Tables List - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô Card ‡πÅ‡∏ö‡∏ö List
                Expanded(
                  child: ListView.builder(
                    itemCount: provider.databaseTables.length,
                    itemBuilder: (context, index) {
                      final table = provider.databaseTables[index];
                      final tableName = table['table_name'] as String;
                      final isFormulaTable = table['is_formula_table'] as bool;
                      final recordCount = table['record_count'] as int;

                      return Padding(
                        padding: EdgeInsets.only(bottom: 8),
                        child: Card(
                          elevation: 2,
                          child: InkWell(
                            onTap: () => _viewTableData(tableName, provider),
                            borderRadius: BorderRadius.circular(8),
                            child: Container(
                              padding: EdgeInsets.all(16),
                              child: Row(
                                children: [
                                  // Icon
                                  Container(
                                    padding: EdgeInsets.all(8),
                                    decoration: BoxDecoration(
                                      color:
                                          isFormulaTable
                                              ? const Color(0xFF5A9B9E)
                                              : const Color(0xFF2D3E50),
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: Icon(
                                      isFormulaTable
                                          ? Icons.functions
                                          : Icons.table_chart,
                                      color: Colors.white,
                                      size: 20,
                                    ),
                                  ),
                                  SizedBox(width: 12),

                                  // Content
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Row(
                                          children: [
                                            Expanded(
                                              child: Text(
                                                tableName,
                                                style: TextStyle(
                                                  fontWeight: FontWeight.w600,
                                                  color: const Color(
                                                    0xFF2D3E50,
                                                  ),
                                                  fontSize: 16,
                                                ),
                                              ),
                                            ),
                                            if (isFormulaTable)
                                              Container(
                                                padding: EdgeInsets.symmetric(
                                                  horizontal: 8,
                                                  vertical: 4,
                                                ),
                                                decoration: BoxDecoration(
                                                  color: const Color(
                                                    0xFF5A9B9E,
                                                  ).withOpacity(0.2),
                                                  borderRadius:
                                                      BorderRadius.circular(12),
                                                ),
                                                child: Text(
                                                  'Formula',
                                                  style: TextStyle(
                                                    fontSize: 10,
                                                    fontWeight: FontWeight.w600,
                                                    color: const Color(
                                                      0xFF5A9B9E,
                                                    ),
                                                  ),
                                                ),
                                              ),
                                          ],
                                        ),
                                        SizedBox(height: 4),
                                        Text(
                                          '$recordCount records',
                                          style: TextStyle(
                                            color: Colors.grey.shade600,
                                            fontSize: 14,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),

                                  // Menu Button
                                  PopupMenuButton<String>(
                                    onSelected:
                                        (value) => _handleTableAction(
                                          value,
                                          tableName,
                                          provider,
                                        ),
                                    icon: Icon(
                                      Icons.more_vert,
                                      color: Colors.grey.shade600,
                                    ),
                                    itemBuilder:
                                        (context) => [
                                          PopupMenuItem(
                                            value: 'view',
                                            child: Row(
                                              children: [
                                                Icon(
                                                  Icons.visibility,
                                                  size: 16,
                                                  color: const Color(
                                                    0xFF2D3E50,
                                                  ),
                                                ),
                                                SizedBox(width: 8),
                                                Text('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                                              ],
                                            ),
                                          ),
                                          PopupMenuItem(
                                            value: 'export',
                                            child: Row(
                                              children: [
                                                Icon(
                                                  Icons.file_download,
                                                  size: 16,
                                                  color: const Color(
                                                    0xFF5A9B9E,
                                                  ),
                                                ),
                                                SizedBox(width: 8),
                                                Text('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'),
                                              ],
                                            ),
                                          ),
                                          if (recordCount > 0)
                                            PopupMenuItem(
                                              value: 'clear',
                                              child: Row(
                                                children: [
                                                  Icon(
                                                    Icons.clear_all,
                                                    size: 16,
                                                    color: Colors.orange,
                                                  ),
                                                  SizedBox(width: 8),
                                                  Text(
                                                    '‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                                                    style: TextStyle(
                                                      color: Colors.orange,
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                        ],
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildInfoChip(IconData icon, String label) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.8),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: const Color(0xFF2D3E50).withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: const Color(0xFF2D3E50)),
          SizedBox(width: 6),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w500,
              color: const Color(0xFF2D3E50),
            ),
          ),
        ],
      ),
    );
  }

  void _refreshTables() async {
    final provider = Provider.of<FormulaProvider>(context, listen: false);
    await provider.refreshFormulas();
    _showMessage('‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
  }

  void _handleTableAction(
    String action,
    String tableName,
    FormulaProvider provider,
  ) {
    switch (action) {
      case 'view':
        _viewTableData(tableName, provider);
        break;
      case 'export':
        _exportTable(tableName);
        break;
      case 'clear':
        _confirmClearTable(tableName, provider);
        break;
    }
  }

  void _viewTableData(String tableName, FormulaProvider provider) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å table
      final data = await provider.getTableData(tableName);
      final columns = await provider.getTableColumns(tableName);

      if (!mounted) return;

      showDialog(
        context: context,
        builder:
            (context) => AlertDialog(
              title: Row(
                children: [
                  Icon(Icons.table_chart, color: const Color(0xFF2D3E50)),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      tableName,
                      style: TextStyle(color: const Color(0xFF2D3E50)),
                    ),
                  ),
                ],
              ),
              content: Container(
                width: double.maxFinite,
                height: 400,
                child:
                    data.isEmpty
                        ? Center(
                          child: Text(
                            '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Table ‡∏ô‡∏µ‡πâ',
                            style: TextStyle(color: Colors.grey.shade600),
                          ),
                        )
                        : SingleChildScrollView(
                          child: SingleChildScrollView(
                            scrollDirection: Axis.horizontal,
                            child: DataTable(
                              headingRowColor: MaterialStateProperty.all(
                                const Color(0xFF7FB8C4).withOpacity(0.3),
                              ),
                              columns:
                                  columns
                                      .map(
                                        (col) => DataColumn(label: Text(col)),
                                      )
                                      .toList(),
                              rows:
                                  data
                                      .take(50) // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 50 records ‡πÅ‡∏£‡∏Å
                                      .map(
                                        (row) => DataRow(
                                          cells:
                                              columns
                                                  .map(
                                                    (col) => DataCell(
                                                      Text(
                                                        row[col]?.toString() ??
                                                            '',
                                                        style: TextStyle(
                                                          fontSize: 12,
                                                        ),
                                                      ),
                                                    ),
                                                  )
                                                  .toList(),
                                        ),
                                      )
                                      .toList(),
                            ),
                          ),
                        ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: Text('‡∏õ‡∏¥‡∏î'),
                ),
              ],
            ),
      );
    } catch (e) {
      _showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: $e');
    }
  }

  void _exportTable(String tableName) {
    _showMessage('‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å $tableName (‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠)');
  }

  void _confirmClearTable(String tableName, FormulaProvider provider) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder:
          (context) => AlertDialog(
            title: Row(
              children: [
                Icon(Icons.warning, color: Colors.orange),
                SizedBox(width: 8),
                Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
              ],
            ),
            content: Text(
              '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô table "$tableName"?',
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context, false),
                child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.pop(context, true),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
                child: Text('‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
              ),
            ],
          ),
    );

    if (confirmed == true) {
      try {
        final success = await provider.deleteAllRecords(tableName);
        if (success) {
          _showMessage('‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô $tableName ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
          await provider.refreshFormulas(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        } else {
          _showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
        }
      } catch (e) {
        _showMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
      }
    }
  }

  void _showMessage(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: const Color(0xFF2D3E50),
          duration: Duration(seconds: 2),
        ),
      );
    }
  }
}
