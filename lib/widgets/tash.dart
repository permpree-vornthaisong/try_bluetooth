// // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BTN4 - Insert ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// Future<void> _insertWeightToBTN4(
//   BuildContext context,
//   DisplayHomeProvider displayProvider,
//   FormulaProvider formulaProvider,
//   SettingProvider settingProvider,
// ) async {
//   try {
//     print('üîÑ [BTN4] Starting weight insertion process...');

//     // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å formula ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
//     if (displayProvider.isReadonlyMode || !displayProvider.hasValidFormulaSelected) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(
//           content: Text('Please select a formula first'),
//           backgroundColor: Colors.orange,
//         ),
//       );
//       return;
//     }

//     // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//     if (settingProvider.currentRawValue == null) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(
//           content: Text('No weight data available. Please connect device first.'),
//           backgroundColor: Colors.red,
//         ),
//       );
//       return;
//     }

//     final selectedFormulaName = displayProvider.selectedFormula!;
//     final weightValue = settingProvider.currentRawValue!;
//     final deviceName = settingProvider.connectedDevice?.platformName ?? 'Unknown Device';
//     final timestamp = DateTime.now().toIso8601String();

//     print('‚öñÔ∏è [BTN4] Weight value: ${weightValue.toStringAsFixed(2)} kg');
//     print('üì± [BTN4] Device: $deviceName');
//     print('üïê [BTN4] Timestamp: $timestamp');

//     // 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• formula
//     final formulaDetails = formulaProvider.getFormulaByName(selectedFormulaName);
    
//     if (formulaDetails == null) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(
//           content: Text('Formula not found'),
//           backgroundColor: Colors.red,
//         ),
//       );
//       return;
//     }

//     final tableName = formulaDetails.tableName;
//     final existingColumns = formulaDetails.columnNames;
    
//     print('üìã [BTN4] Table: $tableName');
//     print('üè∑Ô∏è [BTN4] Existing columns: $existingColumns');

//     // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ column weight ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//     final normalizedColumns = existingColumns.map((col) => col.toLowerCase().replaceAll(' ', '_')).toList();
//     final hasWeightColumn = normalizedColumns.any((col) => 
//         col == 'weight' || 
//         col == 'weight_kg' || 
//         col == 'weight_value' ||
//         col.contains('weight')
//     );

//     print('üîç [BTN4] Has weight column: $hasWeightColumn');

//     // 5. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö insert
//     final Map<String, dynamic> dataToInsert = {};

//     if (hasWeightColumn) {
//       // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ weight column ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
//       print('‚úÖ [BTN4] Using existing weight column');
      
//       for (int i = 0; i < existingColumns.length; i++) {
//         final originalColumnName = existingColumns[i];
//         final normalizedColumnName = originalColumnName.toLowerCase().replaceAll(' ', '_');
        
//         if (normalizedColumnName == 'weight' || 
//             normalizedColumnName == 'weight_kg' || 
//             normalizedColumnName == 'weight_value' ||
//             normalizedColumnName.contains('weight')) {
//           // ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
//           dataToInsert[normalizedColumnName] = weightValue.toString();
//           print('‚öñÔ∏è [BTN4] Inserted weight: $weightValue -> $normalizedColumnName');
//         } else if (normalizedColumnName.contains('time') || 
//                    normalizedColumnName.contains('date') ||
//                    normalizedColumnName == 'timestamp') {
//           // ‡πÉ‡∏™‡πà timestamp
//           dataToInsert[normalizedColumnName] = timestamp;
//           print('üïê [BTN4] Inserted timestamp -> $normalizedColumnName');
//         } else if (normalizedColumnName.contains('device') || 
//                    normalizedColumnName.contains('source')) {
//           // ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ device
//           dataToInsert[normalizedColumnName] = deviceName;
//           print('üì± [BTN4] Inserted device -> $normalizedColumnName');
//         } else {
//           // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• default
//           dataToInsert[normalizedColumnName] = 'Auto-${DateTime.now().millisecondsSinceEpoch}';
//           print('üìù [BTN4] Inserted default -> $normalizedColumnName');
//         }
//       }
//     } else {
//       // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ weight column - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° column weight ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
//       print('‚ö†Ô∏è [BTN4] No weight column found. Adding weight column...');
      
//       try {
//         // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° weight column ‡∏•‡∏á‡πÉ‡∏ô table
//         await _addWeightColumnToTable(formulaProvider, tableName);
        
//         // 2. ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≤‡∏° column ‡πÄ‡∏î‡∏¥‡∏°
//         for (int i = 0; i < existingColumns.length; i++) {
//           final normalizedColumnName = existingColumns[i].toLowerCase().replaceAll(' ', '_');
          
//           if (normalizedColumnName.contains('time') || 
//               normalizedColumnName.contains('date') ||
//               normalizedColumnName == 'timestamp') {
//             dataToInsert[normalizedColumnName] = timestamp;
//           } else if (normalizedColumnName.contains('device') || 
//                      normalizedColumnName.contains('source')) {
//             dataToInsert[normalizedColumnName] = deviceName;
//           } else {
//             dataToInsert[normalizedColumnName] = 'Auto-${DateTime.now().millisecondsSinceEpoch}';
//           }
//         }
        
//         // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏ô column weight ‡πÉ‡∏´‡∏°‡πà
//         dataToInsert['weight'] = weightValue.toString();
//         print('‚úÖ [BTN4] Added weight column and inserted weight: $weightValue');
        
//       } catch (e) {
//         print('‚ùå [BTN4] Failed to add weight column: $e');
//         ScaffoldMessenger.of(context).showSnackBar(
//           SnackBar(
//             content: Text('Failed to add weight column: $e'),
//             backgroundColor: Colors.red,
//           ),
//         );
//         return;
//       }
//     }

//     print('üíæ [BTN4] Final data to insert: $dataToInsert');

//     // 6. Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á database
//     final success = await formulaProvider.createRecord(
//       tableName: tableName,
//       data: dataToInsert,
//     );

//     // 7. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
//     if (success) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(
//           content: Text(
//             'Weight ${weightValue.toStringAsFixed(2)} kg saved to $selectedFormulaName!',
//           ),
//           backgroundColor: Colors.green,
//           duration: const Duration(seconds: 2),
//         ),
//       );
      
//       print('‚úÖ [BTN4] Weight data saved successfully!');
//       print('üìä [BTN4] Weight: ${weightValue.toStringAsFixed(2)} kg');
//       print('üìã [BTN4] Formula: $selectedFormulaName');
      
//       // Optional: Print table data to verify
//       await formulaProvider.printSpecificTable(tableName);
      
//     } else {
//       ScaffoldMessenger.of(context).showSnackBar(
//         const SnackBar(
//           content: Text('Failed to save weight data'),
//           backgroundColor: Colors.red,
//         ),
//       );
      
//       print('‚ùå [BTN4] Failed to save weight data');
//     }

//   } catch (e) {
//     print('‚ùå [BTN4] Error in weight insertion: $e');
    
//     ScaffoldMessenger.of(context).showSnackBar(
//       SnackBar(
//         content: Text('Error saving weight: $e'),
//         backgroundColor: Colors.red,
//       ),
//     );
//   }
// }

// // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° weight column ‡∏•‡∏á‡πÉ‡∏ô table
// Future<void> _addWeightColumnToTable(
//   FormulaProvider formulaProvider,
//   String tableName,
// ) async {
//   try {
//     print('üîß [BTN4] Adding weight column to table: $tableName');
    
//     // ‡πÉ‡∏ä‡πâ SQL ALTER TABLE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° column (‡∏ñ‡πâ‡∏≤ GenericCRUDProvider ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
//     // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà provider ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
    
//     // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ GenericCRUDProvider (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ method addColumn)
//     // await formulaProvider._crudProvider!.addColumn(tableName, 'weight', 'TEXT');
    
//     // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ñ‡πâ‡∏≤ provider ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö raw SQL)
//     // await formulaProvider._crudProvider!.executeSql(
//     //   'ALTER TABLE $tableName ADD COLUMN weight TEXT'
//     // );
    
//     // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö demo - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° column ‡πÑ‡∏î‡πâ
//     // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á record ‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
//     print('‚ö†Ô∏è [BTN4] Weight column addition simulated (actual implementation depends on GenericCRUDProvider capabilities)');
    
//   } catch (e) {
//     print('‚ùå [BTN4] Error adding weight column: $e');
//     throw e;
//   }
// }

// // BTN4 Implementation
// Expanded(
//   child: Consumer3<DisplayHomeProvider, FormulaProvider, SettingProvider>(
//     builder: (context, displayProvider, formulaProvider, settingProvider, child) {
//       return _buildButton(
//         'SAVE WEIGHT',
//         backgroundColor: Colors.teal,
//         onPressed: () async {
//           await _insertWeightToBTN4(
//             context,
//             displayProvider,
//             formulaProvider,
//             settingProvider,
//           );
//         },
//       );
//     },
//   ),
// ),

// // ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Provider.of ‡πÅ‡∏ó‡∏ô Consumer
// Expanded(
//   child: _buildButton(
//     'SAVE WEIGHT',
//     backgroundColor: Colors.teal,
//     onPressed: () async {
//       final displayProvider = Provider.of<DisplayHomeProvider>(context, listen: false);
//       final formulaProvider = Provider.of<FormulaProvider>(context, listen: false);
//       final settingProvider = Provider.of<SettingProvider>(context, listen: false);
      
//       await _insertWeightToBTN4(
//         context,
//         displayProvider,
//         formulaProvider,
//         settingProvider,
//       );
//     },
//   ),
// ),


// Bottom Row - BTN3 and BTN4
// Row(
//   children: [
//     Expanded(
//       child: _buildButton(
//         'BTN3',
//         onPressed: () {
//           print('BTN3 pressed');
//         },
//       ),
//     ),
//     const SizedBox(width: 16),
//     Expanded(
//       child: Consumer3<DisplayHomeProvider, FormulaProvider, SettingProvider>(
//         builder: (context, displayProvider, formulaProvider, settingProvider, child) {
//           return _buildButton(
//             'SAVE WEIGHT',
//             backgroundColor: Colors.teal,
//             onPressed: () async {
//               await _insertWeightToBTN4(
//                 context,
//                 displayProvider,
//                 formulaProvider,
//                 settingProvider,
//               );
//             },
//           );
//         },
//       ),
//     ),
//   ],
// ),